@page "/supplier/{supplierId:int}"
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IConfiguration Configuration
@using Model.Request
@using Model.Response
@using Supplier.API.Configuration
@using System.Text
@using Microsoft.Extensions.Configuration.Json
@using System.Text.Json
@using Newtonsoft.Json
<h3>Add/Edit Suppliers</h3>

<div class="row">
    <div class="card col-md-6">
        <div class="row">
            <div class="col-md-6">
                Supplier Name:
            </div>
            <div class="col-md-6">
                <input type="text" @bind="supplierRequest.SupplierName" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                Address Line 1:
            </div>
            <div class="col-md-6">
                <textarea @bind="supplierRequest.AddressLine1" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                Address Line 2:
            </div>
            <div class="col-md-6">
                <textarea @bind="supplierRequest.AddressLine2" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                City:
            </div>
            <div class="col-md-6">
                <input type="text" @bind="supplierRequest.City" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                Postal Code:
            </div>
            <div class="col-md-6">
                <input type="number" maxlength="6" @bind="supplierRequest.PostalCodel" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                State:
            </div>
            <div class="col-md-6">
                <select @bind="selectedSate">
                    @foreach (var state in states)
                    {
                        <option value="@state">@state</option>
                    }
                </select>
            </div>
            @selectedSate
        </div>
        <div class="row">
            <div class="col-md-12 text-center">
                <button class="btn btn-primary" @onclick="() => OnSave()">Save</button>
                <button class="btn btn-primary" @onclick="() => OnCancel()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string token = "";
    private string selectedSate = "";
    private SupplierRequest supplierRequest = new SupplierRequest();
    private string[] states = { "NY", "NJ", "PR" };
    [Parameter]
    public int supplierId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProtectedBrowserStorageResult<string> tokenValue = await ProtectedSessionStore.GetAsync<string>("Token");
            if (tokenValue.Success)
            {
                token = tokenValue.Value.ToString();
            }

            if (supplierId != 0)
            {
                var http = new HttpClient()
                    {
                        BaseAddress = new Uri(Configuration["AppSettings:APIURL"])
                    };

                http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await http.GetAsync($"api/supplier/{supplierId}");
                string result = await response.Content.ReadAsStringAsync();
                JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions();
                jsonSerializerOptions.PropertyNameCaseInsensitive = true;
                var supplierResponse = System.Text.Json.JsonSerializer.Deserialize<SupplierResponse>(result, jsonSerializerOptions);
                supplierRequest.AddressLine1 = supplierResponse.AddressLine1;
                supplierRequest.AddressLine2 = supplierResponse.AddressLine2;
                supplierRequest.City = supplierResponse.City;
                supplierRequest.PostalCodel = supplierResponse.PostalCode;
                supplierRequest.State = supplierResponse.State;
                selectedSate = supplierResponse.State;
                supplierRequest.SupplierName = supplierResponse.SupplierName;
                supplierRequest.SupplierId = supplierResponse.SupplierId;

                StateHasChanged();
            }
        }
    }
    private void OnCancel()
    {
        NavManager.NavigateTo("suppliers");
    }
    private void OnSave()
    {
        supplierRequest.State = selectedSate;
        var http = new HttpClient()
            {
                BaseAddress = new Uri(Configuration["AppSettings:APIURL"])
            };

        http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var json = JsonConvert.SerializeObject(supplierRequest);
        var data = new StringContent(json, Encoding.UTF8, "application/json");

        if (supplierId == 0)
        {
            var response = http.PostAsync("api/supplier", data).Result;
            string result = response.Content.ReadAsStringAsync().Result;
            if (result == "{}")
            {
                NavManager.NavigateTo("suppliers");
            }
        }
        else
        {
            var response = http.PutAsync($"api/supplier/{supplierId}", data).Result;
            string result = response.Content.ReadAsStringAsync().Result;
            if (result == "{}")
            {
                NavManager.NavigateTo("suppliers");
            }
        }
    }
}